#!/bin/bash

# APPLICATION OPTIONS
CONFIG_DIR="$HOME/.config/faros"
ENGINE=""
IMAGE="quay.io/faros/cluster-manager"
VERSION="latest"
CONTAINER="faros-manager"
CONTEXT="default"

# VERSION PINNING
if basename "$0" | grep '\.' &>/dev/null; then
    VERSION=$(basename "$0" | awk -F'.' '!($1=""){ print $0 }' | xargs echo | tr ' ' '.')
    echo "PINNED VERSION - $VERSION"
fi


function _bootstrap() {
    # find container engine
    ENGINE=$(which docker 2> /dev/null || which podman 2> /dev/null)
    if [ x${ENGINE} == "x" ]; then
        echo "No container engine found. Please install Podman or Docker." >&2
        exit 1
    fi

    # ensure program is installed
    if ! $ENGINE images $IMAGE | grep $VERSION &> /dev/null; then
        echo "Installing $CONTAINER" >&2
        update
        echo "" >&2
    fi

    # ensure config directory exists
    if [ -e $CONFIG_DIR/.active ]; then
        CONTEXT=$(cat $CONFIG_DIR/.active)
        if [ "x${CONTEXT}" == "x" ]; then
            context default >&2
        fi
    else
        echo "Creating skeleton configuration directory." >&2
        mkdir -p $CONFIG_DIR
        echo "default" > $CONFIG_DIR/.active
        echo "" >&2
    fi
    _context_init >&2
}


function run() {
    it=""
    if [ "$1" == "-it" ]; then
        it="-it"
        shift
    fi

    WAN_INT=$(ip route show default | tail -n 1 | grep -o -P 'dev [a-z0-1]*' | awk '{ print $2 }')
    BASTION_IP_ADDR=$(ip addr show dev ens1 scope global primary | grep -o -P 'inet [0-9]+.[0-9]+.[0-9]+.[0-9]+' | awk '{ print $2 }')
    BASTION_INTERFACES=$(nmcli --fields DEVICE,TYPE device status | grep -P '(ethernet|bond)\s*$' | awk '{ print $1 }' | grep -v "$WAN_INT" | xargs echo)
    BASTION_HOST_NAME=$(hostname -s)
    BASTION_SSH_USER=$(whoami)
    CLUSTER_DOMAIN=$(hostname -d | awk -F'.' '!($1=""){print $0}' | xargs echo | tr ' ' '.')
    CLUSTER_NAME=$(hostname -d | awk -F'.' '{print $1}')
    BOOT_DRIVE=$(mount | grep " on /boot " | grep -Po '/dev/[a-z]+' | awk -F'/' '{ print $3 }')

    $ENGINE run --rm $it \
        -v "${CONFIG_DIR}/${CONTEXT}:/data:Z" \
        -e "WAN_INT=${WAN_INT}" \
        -e "BASTION_IP_ADDR=${BASTION_IP_ADDR}" \
        -e "BASTION_INTERFACES=${BASTION_INTERFACES}" \
        -e "BASTION_HOST_NAME=${BASTION_HOST_NAME}" \
        -e "BASTION_SSH_USER=${BASTION_SSH_USER}" \
        -e "CLUSTER_DOMAIN=${CLUSTER_DOMAIN}" \
        -e "CLUSTER_NAME=${CLUSTER_NAME}" \
        -e "BOOT_DRIVE=${BOOT_DRIVE}" \
        ${IMAGE}:${VERSION} \
        $@
}


function _context_init() {
    if [ ! -e $CONFIG_DIR/$CONTEXT ]; then
        echo "Initializing context: ${CONTEXT}"
        mkdir -p $CONFIG_DIR/$CONTEXT
        if (echo n | ssh-keygen -q -N "" -f "$CONFIG_DIR/$CONTEXT/id_rsa" -C "Faros | ${CONTEXT}"); then
            mkdir -p ~/.ssh; chown $(id -u):$(id -g) ~/.ssh; chmod 0700 ~/.ssh
            cat "$CONFIG_DIR/$CONTEXT/id_rsa.pub" >> ~/.ssh/authorized_keys
            chmod 600 ~/.ssh/authorized_keys
            ln -fs "$CONFIG_DIR/$CONTEXT/id_rsa" ~/.ssh/id_rsa.faros_${CONTEXT}
            ln -fs "$CONFIG_DIR/$CONTEXT/id_rsa.pub" ~/.ssh/id_rsa.faros_${CONTEXT}.pub
        fi
        run ""
        echo ""
    fi
}


function context() {
    if [ "$#" == "0" ]; then
        ls ${CONFIG_DIR} | sed "s/^${CONTEXT}$/* ${CONTEXT}/g"
        exit
    fi

    CONTEXT=$1; shift
    echo "$CONTEXT" > $CONFIG_DIR/.active
    _context_init
}


function update() {
    $ENGINE pull $IMAGE:$VERSION
    run ""
    echo ""
}


function dir() {
    echo "${CONFIG_DIR}/${CONTEXT}"
}


function _app_cmds() {
    run ls -1 /app/cli
}


function main() {
    # setup
    _bootstrap || exit $!

    # get requested command
    if [ "$#" == "0" ]; then
        cmd="help"
    else
        cmd="$1"; shift
    fi

    # script native commands
    case "$cmd" in
        "update")
            update $@
            exit $?
            ;;
        "shell")
            run -it /bin/bash
            exit $?
            ;;
        "dir")
            dir
            exit $?
            ;;
        "help")
            commands="$(_app_cmds)"

            echo "Usage: $0 COMMAND ..."
            echo ""
            echo "Basic Commands:"
            echo "    dir: Print the cluster context storage directory"
            echo "    help: Print this text"
            echo "    shell: Start an interactive bash shell in the application namespace"
            echo "    update: Update this application"
            echo ""
            echo "Application Commands:"
            echo -e "$commands" | sort | awk '{ print "    " $1}'
            exit 1
            ;;
    esac

    # container commands
    commands="$(_app_cmds)"
    if echo "$commands" | grep "^$cmd$" &>/dev/null; then
        run -it /app/cli/$cmd $@
        exit $?
    fi

    # not found
    echo "Command not found: $cmd" >&2
    echo "$0 help -> for help" >&2
    exit 1
}

main $@

