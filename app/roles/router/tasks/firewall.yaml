- name: ensure masquerading is enabled
  firewalld:
    zone: "{{ item }}"
    masquerade: 'yes'
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    - external
    - internal

- name: get all firewall direct rules
  command: firewall-cmd --direct --get-all-rules
  register: direct_rules
  changed_when: False

- name: allow internal->public packets to be routed - immediate
  command: firewall-cmd --direct --add-rule {{ item }}
  loop:
    - ipv4 nat POSTROUTING 0 -o {{ router_wan_interface }} -j MASQUERADE
    - ipv4 filter FORWARD 0 -i faroslan -o {{ router_wan_interface }} -j ACCEPT
    - ipv4 filter FORWARD 0 -i {{ router_wan_interface }} -o faroslan -m state --state RELATED,ESTABLISHED -j ACCEPT
  when: "item not in direct_rules.stdout_lines"

- name: allow internal->public packets to be routed - permanent
  command: firewall-cmd --direct --permanent --add-rule {{ item }}
  loop:
    - ipv4 nat POSTROUTING 0 -o {{ router_wan_interface }} -j MASQUERADE
    - ipv4 filter FORWARD 0 -i faroslan -o {{ router_wan_interface }} -j ACCEPT
    - ipv4 filter FORWARD 0 -i {{ router_wan_interface }} -o faroslan -m state --state RELATED,ESTABLISHED -j ACCEPT
  when: "item not in direct_rules.stdout_lines"

- name: enable ingress ssh to bastion
  firewalld:
    zone: external
    service: ssh
    permanent: yes
    immediate: yes
    state: enabled
  when: '"SSH to Bastion" in allowed_services'

- name: disable ingress ssh to bastion
  firewalld:
    zone: external
    service: ssh
    permanent: yes
    immediate: yes
    state: disabled
  when: '"SSH to Bastion" not in allowed_services'

- include_tasks: manage_forward_ports.yaml
  loop:
    - name: ingress https to cluster api
      rule: port=6443:proto=tcp:toport=6443:toaddr={{ router_loadbalancer }}
      exist: '{{ "HTTPS to Cluster API" in allowed_services }}'
    - name: ingress http to cluster apps
      rule: port=80:proto=tcp:toport=80:toaddr={{ router_loadbalancer }}
      exist: '{{ "HTTP to Cluster Apps" in allowed_services }}'
    - name: ingress https to cluster apps
      rule: port=443:proto=tcp:toport=443:toaddr={{ router_loadbalancer }}
      exist: '{{ "HTTPS to Cluster Apps" in allowed_services }}'
  loop_control:
    loop_var: "outer"
    label: "{{ outer.name }}"
