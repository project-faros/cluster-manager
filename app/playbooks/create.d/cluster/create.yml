#!/usr/bin/env ansible-playbook

- name: Perform pre-install checks
  hosts: localhost
  become: false
  gather_facts: false
  any_errors_fatal: true

  vars:
    openshift_installer_dir: /data/openshift-installer

  tasks:
    - name: get cluster cert age
      shell: >
        expr $(date '+%s') -
        $(stat -c '%Y' "{{ openshift_installer_dir }}/.openshift_install_state.json")
        || echo '9999999'
      register: cluster_cert_age
      changed_when: cluster_cert_age.stdout | int > 43200

    - name: ensure certificates are not expired
      set_stats:
        data:
          post_message:
            - "The cluster bootstrap certificate has probably expired. Please recreate the installation repositories to deploy new ignition files."
            - ""
            - "Recreate the install configs with:"
            - ">> farosctl create install-repos"
            - ""
      when: cluster_cert_age is changed

    - name: ensure certificates are not expired
      fail:
        msg: The installation certificate has expired.
      when: cluster_cert_age is changed

- name: Ensure all cluster nodes are powered down
  hosts: cluster
  become: false
  gather_facts: false
  serial: 1

  tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "poweroff/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

- name: Create the Control Plane
  hosts: control_plane
  become: false
  gather_facts: false

  tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "netboot/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

    - name: wait for nodes to start provisioning
      shell: ping -c 1 {{ ansible_host }}
      delegate_to: "{{ groups.bastion_hosts[0] }}"
      become: false
      register: node_ping
      until: "node_ping is not failed"
      retries: 30
      delay: 10
      changed_when: false

- name: Create the Bootstrap node
  hosts: bootstrap
  become: false
  gather_facts: false

  tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "netboot/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

    - name: wait for bootstrap to finish provisioning
      wait_for_connection:
        delay: 60
        sleep: 15
        timeout: 3600

- name: Wait for the OpenShift Installation to Complete
  hosts: localhost
  become: false
  gather_facts: false

  tasks:
    - block:
        - name: write upgrade status to tmp file
          copy:
            dest: /data/upgrade-status
            content: Waiting for cluster bootstrap to complete.
          delegate_to: localhost

        - name: wait for bootstrap to complete
          shell: ./openshift-install wait-for bootstrap-complete 2>&1
          args:
            chdir: /data/openshift-installer
          changed_when: false
          register: cluster_install
          retries: 2
          delay: 1
          until: cluster_install is not failed

        - name: write upgrade status to tmp file
          copy:
            dest: /data/upgrade-status
            content: Waiting for cluster install to complete.
          delegate_to: localhost

        - name: wait for cluster install to complete
          shell: ./openshift-install wait-for install-complete 2>&1
          args:
            chdir: /data/openshift-installer
          changed_when: false
          register: cluster_install
          retries: 2
          delay: 1

        - name: write upgrade status to tmp file
          copy:
            dest: /data/upgrade-status
            content: Cluster installation is complete.
          delegate_to: localhost

        - name: save cluster install output
          set_stats:
            data:
              post_message: "{{ cluster_install.stdout_lines }}"

      rescue:
        - name: there was an error during install
          fail:
            msg: "{{ '\n'.join(cluster_install.stdout_lines | default ([])) }}"

- name: Power down the bootstrap node
  hosts: bootstrap
  become: false
  gather_facts: false
  serial: 1

  tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "poweroff/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

- name: Add OpenShift Links to Cockpit
  hosts: bastion_hosts
  gather_facts: false
  become: true

  tasks:
    - name: create cockpit links
      include_role:
        name: cockpit-links
      vars:
        cockpit_links:
          - name: "OpenShift Console"
            url: "https://console-openshift-console.apps.{{ cluster_name }}.{{ cluster_domain }}"
            icon: fa-redhat
