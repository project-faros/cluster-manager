#!/usr/bin/env ansible-playbook
- name: Are you sure?
  hosts: all
  any_errors_fatal: yes
  max_fail_percentage: 0
  serial: 100%
  gather_facts: no

  vars_prompt:
    - name: confirm
      prompt: This will destroy the running cluster and you will lose all data. Are you sure? [yes to continue]
      private: no

  tasks:
    - name: Validate user input
      fail:
        msg: "Action cancelled."
      when: 'confirm != "yes"'

- import_playbook: /app/playbooks/util_vm_facts.yml

- name: Destroy cluster nodes
  hosts: cluster:!bootstrap
  become: no
  gather_facts: no
  any_errors_fatal: yes
  max_fail_percentage: 0
  serial: 1

  pre_tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "poweroff/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

  roles:
    - name: pxelinux-kickstarts
      pxelinux_kickstarts_pxe_server: "{{ groups.bastion_hosts.0 }}"
      pxelinux_kickstarts_content_server: "http://{{ hostvars[groups.bastion_hosts.0].ansible_host }}:8081"
      pxelinux_kickstarts_host_role: "{{ node_role }}"
      pxelinux_kickstarts_install_disk: "{{ install_disk }}"
      pxelinux_kickstarts_profile: wipe

  tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "netboot/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

- name: Wait for cluster nodes to start wiping
  hosts: cluster:!bootstrap
  become: no
  gather_facts: no
  any_errors_fatal: yes
  max_fail_percentage: 0

  tasks:
    - name: wait for nodes to start wiping
      shell: ping -c 1 {{ ansible_host }}
      delegate_to: "{{ groups.bastion_hosts[0] }}"
      become: no
      register: node_ping
      until: "node_ping is not failed"
      retries: 30
      delay: 10
      changed_when: no

- name: Terminate the Bootstrap node
  hosts: bootstrap
  become: no
  gather_facts: no

  tasks:
    - include_role:
        name: management
        defaults_from: main.yml
        tasks_from: "poweroff/{{ mgmt_provider }}.yml"
        vars_from: "{{ mgmt_provider }}.yml"
        handlers_from: "{{ mgmt_provider }}.yml"
      vars:
        management_hostname: "{{ mgmt_hostname }}"
        management_user: "{{ mgmt_user }}"
        management_pass: "{{ mgmt_password }}"

- name: Clean cockpit interface
  hosts: bastion
  gather_facts: no
  become: yes

  tasks:
    - name: remove faros page from cockpit
      file:
        path: /usr/local/share/cockpit/faros
        state: absent


- name: Wait for hosts to finish disk wipe
  hosts: cluster:!bootstrap
  become: no
  gather_facts: no

  tasks:
    - name: create tmp cache dir
      tempfile:
        state: directory
      register: cache
      delegate_to: localhost

    - name: wait for node to power off
      shell: |
        ilorest --cache-dir="{{ cache.path }}" login "{{ mgmt_hostname }}" -u '{{ mgmt_user }}' -p '{{ mgmt_password }}' &>/dev/null
        ilorest --cache-dir="{{ cache.path }}" --nologo get --selector=ComputerSystem PowerState --json
      register: powercheck
      changed_when: False
      delegate_to: localhost
      retries: 60
      delay: 10
      until: "(powercheck.stdout | from_json)['PowerState'] == 'Off'"
